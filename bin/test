#!/bin/bash

# Docker Compose Test Script for Development Dependencies
# This script validates that all services are working correctly

echo "🧪 Running Docker Compose tests for Development Dependencies..."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run a test
run_test() {
    local test_name="$1"
    local test_command="$2"

    echo -n "Testing $test_name... "

    if eval "$test_command" >/dev/null 2>&1; then
        echo -e "${GREEN}✅ PASS${NC}"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}❌ FAIL${NC}"
        ((TESTS_FAILED++))
    fi
}

# Function to wait for MySQL with retry
wait_for_mysql() {
    local max_attempts=30
    local attempt=1
    local wait_time=2

    echo -n "Waiting for MySQL to be ready... "

    while [ $attempt -le $max_attempts ]; do
        if mysql -h 127.0.0.1 -P ${MYSQL_PORT:-33308} -u root -e "SELECT 1" >/dev/null 2>&1; then
            echo -e "${GREEN}✅ READY${NC}"
            return 0
        fi

        if [ $attempt -eq $max_attempts ]; then
            echo -e "${RED}❌ TIMEOUT${NC}"
            return 1
        fi

        sleep $wait_time
        ((attempt++))
    done
}

# Function to wait for Elasticsearch with retry
wait_for_elasticsearch() {
    local max_attempts=30
    local attempt=1
    local wait_time=2

    echo -n "Waiting for Elasticsearch to be ready... "

    while [ $attempt -le $max_attempts ]; do
        if curl -s http://127.0.0.1:${ELASTICSEARCH_PORT:-9200} >/dev/null 2>&1; then
            echo -e "${GREEN}✅ READY${NC}"
            return 0
        fi

        if [ $attempt -eq $max_attempts ]; then
            echo -e "${RED}❌ TIMEOUT${NC}"
            return 1
        fi

        sleep $wait_time
        ((attempt++))
    done
}

# Function to test port binding
test_port_binding() {
    local service="$1"
    local port="$2"

    echo -n "Testing $service port binding on $port... "

    if netstat -an | grep -q "127.0.0.1.$port.*LISTEN"; then
        echo -e "${GREEN}✅ PASS${NC}"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}❌ FAIL${NC}"
        ((TESTS_FAILED++))
    fi
}

echo "🔍 Checking if services are running..."
if ! docker-compose ps | grep -q "Up"; then
    echo -e "${YELLOW}⚠️  Services not running. Starting them first...${NC}"
    docker-compose up -d
    sleep 5
fi

echo ""
echo "📋 Running connectivity tests..."

# Wait for MySQL to be ready, then test
wait_for_mysql
if [ $? -eq 0 ]; then
    run_test "MySQL connection" "mysql -h 127.0.0.1 -P ${MYSQL_PORT:-33308} -u root -e 'SELECT 1'"
else
    echo -e "${RED}❌ MySQL connection test skipped due to timeout${NC}"
    ((TESTS_FAILED++))
fi

# Test Redis connection (usually starts quickly)
run_test "Redis connection" "redis-cli -h 127.0.0.1 -p ${REDIS_PORT:-6379} ping"

# Wait for Elasticsearch to be ready, then test
wait_for_elasticsearch
if [ $? -eq 0 ]; then
    run_test "Elasticsearch connection" "curl -s http://127.0.0.1:${ELASTICSEARCH_PORT:-9200} >/dev/null"
else
    echo -e "${RED}❌ Elasticsearch connection test skipped due to timeout${NC}"
    ((TESTS_FAILED++))
fi

echo ""
echo "🔒 Running security tests..."

# Test port bindings (should be 127.0.0.1 only)
test_port_binding "MySQL" "${MYSQL_PORT:-33308}"
test_port_binding "Redis" "${REDIS_PORT:-6379}"
test_port_binding "Elasticsearch" "${ELASTICSEARCH_PORT:-9200}"

    echo ""
    echo "⚙️  Testing configuration..."

    # Check if using .env file or shell variables
    if [ -f .env ]; then
        echo "📋 Testing .env file configuration..."
        run_test ".env file exists" "[ -f .env ]"
        run_test ".env file has MySQL config" "grep -q 'MYSQL_PORT=' .env"
        run_test ".env file has Redis config" "grep -q 'REDIS_PORT=' .env"
        run_test ".env file has Elasticsearch config" "grep -q 'ELASTICSEARCH_PORT=' .env"
    else
        echo "🐚 Testing shell environment variables..."
        run_test "MySQL port variable set" "[ -n \"${MYSQL_PORT:-}\" ]"
        run_test "Redis port variable set" "[ -n \"${REDIS_PORT:-}\" ]"
        run_test "Elasticsearch port variable set" "[ -n \"${ELASTICSEARCH_PORT:-}\" ]"
        run_test "Using custom ports" "[ \"${MYSQL_PORT:-33308}\" != \"33308\" ] || [ \"${REDIS_PORT:-6379}\" != \"6379\" ] || [ \"${ELASTICSEARCH_PORT:-9200}\" != \"9200\" ]"
    fi

echo ""
echo "📊 Test Results:"
echo "  ✅ Tests passed: $TESTS_PASSED"
echo "  ❌ Tests failed: $TESTS_FAILED"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}🎉 All tests passed! Your Docker Compose setup is working correctly.${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}💥 Some tests failed. Please check the configuration.${NC}"
    exit 1
fi
